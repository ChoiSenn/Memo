#include "opencv2/opencv.hpp"  // 다양한 클래스와 함수가 선언되어 있는 opencv.hpp 헤더파일
#include <iostream>  // 표준 출력을 위한 iostream 헤더 파일

using namespace cv;  // cv:: 생략 가능
using namespace std;  // std:: 생략 가능

void camera_in();
void video_in();
void camera_in_video_out();

int main(void)
{
	camera_in();
	video_in();
	camera_in_video_out();

	return 0;
}

void camera_in()  // 카메라 입력 처리
{
	VideoCapture cap(0);  // 객체 생성, 컴퓨터의 기본 카메라 사용하도록 설정.

	if (!cap.isOpened()) {  // 카메라가 열리지 않으면
		cerr << "Camera open failed!" << endl;  // 에러메시지 출력 후 종료
		return;
	}

	cout << "Frame width: " << cvRound(cap.get(CAP_PROP_FRAME_WIDTH)) << endl;  // 카메라 속성의 프레임 가로/세로 크기를 출력
	cout << "Frame height: " << cvRound(cap.get(CAP_PROP_FRAME_HEIGHT)) << endl;

	Mat frame, inversed;  // Mat 타입 변수 선언
	while (true) {  // 반복
		cap >> frame;  // 카메라 장치에서 한 프레임을 받아와 frame 변수에 저장
		if (frame.empty())  // 프레임이 비어있으면 while 루프 빠져나감
			break;

		inversed = ~frame;  // 반전한 프레임을 inversed에 저장

		imshow("frame", frame);  // 저장된 정지 영상 화면에 출력
		imshow("inversed", inversed);

		if (waitKey(10) == 27) // ESC key가 입력되면 빠져나가기
			break;
	}

	destroyAllWindows();  // 모든 창 닫기. camera_in 함수 종료 시 cap 변수가 소멸되며 자동으로 카메라 장치가 닫히기에 cap.release() 함수 호출은 생략
}

void video_in()  // 동영상 파일 처리
{  // 대부분의 동영상 파일은 코덱을 이용하여 압축된 형태로 저장. opencv에서는 코덱 해석 기능을 제공.
	VideoCapture cap("stopwatch.avi"); // cap 객체 생성하고 영상 파일 불러오기

	if (!cap.isOpened()) {  // 열리지 않으면
		cerr << "Video open failed!" << endl;  // 오류메시지
		return;
	}

	cout << "Frame width: " << cvRound(cap.get(CAP_PROP_FRAME_WIDTH)) << endl;  // 가로/세로 크기와 전체 프레임 수 출력
	cout << "Frame height: " << cvRound(cap.get(CAP_PROP_FRAME_HEIGHT)) << endl;
	cout << "Frame count: " << cvRound(cap.get(CAP_PROP_FRAME_COUNT)) << endl;

	double fps = cap.get(CAP_PROP_FPS);  // 초당 프레임 수 출력
	cout << "FPS: " << fps << endl;

	int delay = cvRound(1000 / fps);  // FPS 값으로부터 각 프레임 사이의 시간 간격 delay를 계산

	Mat frame, inversed;  // 위 함수와 동일
	while (true) {
		cap >> frame;
		if (frame.empty())
			break;

		inversed = ~frame;

		imshow("frame", frame);
		imshow("inversed", inversed);

		if (waitKey(delay) == 27)
			break;
	}

	destroyAllWindows();
}

void camera_in_video_out()  // 카메라 입력을 반전하여 동영상 파일로 저장
{
	VideoCapture cap(0);

	if (!cap.isOpened()) {
		cerr << "Camera open failed!" << endl;
		return;
	}

	int w = cvRound(cap.get(CAP_PROP_FRAME_WIDTH));
	int h = cvRound(cap.get(CAP_PROP_FRAME_HEIGHT));
	double fps = cap.get(CAP_PROP_FPS);

	int fourcc = VideoWriter::fourcc('M', 'J', 'P', 'G');  // 코덱에 해당하는 fourcc 코드 생성
	int delay = cvRound(1000 / fps);  // FPS 값으로부터 매 프레임 사이의 시간 간격을 밀리초 단위로 생성

	VideoWriter outputVideo("output.avi", fourcc, fps, Size(w, h), true);  // 저장할 동영상 파일 생성

	if (!outputVideo.isOpened()) {
		cout << "File open failed!" << endl;
		return;
	}

	Mat frame, inversed;
	while (true) {
		cap >> frame;
		if (frame.empty())
			break;

		inversed = ~frame;
		outputVideo << inversed;

		imshow("frame", frame);
		imshow("inversed", inversed);

		if (waitKey(delay) == 27)
			break;
	}

	destroyAllWindows();
}
